// Code generated by ggenums; DO NOT EDIT.
package enums

import (
	"encoding/json"
	"fmt"
)

type RunStatusEnum string

const (
	RunStatusInitializing RunStatusEnum = "initializing"
	RunStatusRunning      RunStatusEnum = "running"
	RunStatusCompleted    RunStatusEnum = "completed"
	RunStatusFailed       RunStatusEnum = "failed"
	RunStatusCancelled    RunStatusEnum = "cancelled"
)

var AllRunStatuss = []RunStatusEnum{
	RunStatusInitializing,
	RunStatusRunning,
	RunStatusCompleted,
	RunStatusFailed,
	RunStatusCancelled,
}

func (e RunStatusEnum) String() string {
	return string(e)
}

func (e RunStatusEnum) Validate() error {
	switch e {
	case RunStatusInitializing, RunStatusRunning, RunStatusCompleted, RunStatusFailed, RunStatusCancelled:
		return nil
	default:
		return fmt.Errorf("invalid RunStatus: %s", e)
	}
}

func ParseRunStatus(s string) (RunStatusEnum, error) {
	e := RunStatusEnum(s)
	if err := e.Validate(); err != nil {
		return "", err
	}
	return e, nil
}

func (e RunStatusEnum) MarshalJSON() ([]byte, error) {
	if err := e.Validate(); err != nil {
		return []byte("null"), nil
	}
	return json.Marshal(string(e))
}

func (e *RunStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	parsed, err := ParseRunStatus(s)
	if err != nil {
		return err
	}

	*e = parsed
	return nil
}
