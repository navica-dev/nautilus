// Code generated by ggenums; DO NOT EDIT.
package enums

import (
	"encoding/json"
	"fmt"
)

type LogFormatEnum string

const (
	LogFormatJson    LogFormatEnum = "json"
	LogFormatConsole LogFormatEnum = "console"
)

var AllLogFormats = []LogFormatEnum{
	LogFormatJson,
	LogFormatConsole,
}

func (e LogFormatEnum) String() string {
	return string(e)
}

func (e LogFormatEnum) Validate() error {
	switch e {
	case LogFormatJson, LogFormatConsole:
		return nil
	default:
		return fmt.Errorf("invalid LogFormat: %s", e)
	}
}

func ParseLogFormat(s string) (LogFormatEnum, error) {
	e := LogFormatEnum(s)
	if err := e.Validate(); err != nil {
		return "", err
	}
	return e, nil
}

func (e LogFormatEnum) MarshalJSON() ([]byte, error) {
	if err := e.Validate(); err != nil {
		return []byte("null"), nil
	}
	return json.Marshal(string(e))
}

func (e *LogFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	parsed, err := ParseLogFormat(s)
	if err != nil {
		return err
	}

	*e = parsed
	return nil
}
